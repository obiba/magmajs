// Generated by CoffeeScript 1.8.0
(function() {
  var Magma;

  Magma = typeof exports !== "undefined" && exports !== null ? exports : this;

  Magma.ValueType = {
    TEXT: {
      name: "text",
      valueOf: function(v) {
        if (v === null || v === void 0) {
          return new Value("text", null);
        } else {
          return new Value("text", v + "");
        }
      }
    },
    INTEGER: {
      name: "integer"
    },
    DECIMAL: {
      name: "decimal"
    },
    BOOLEAN: {
      name: "boolean"
    },
    DATETIME: {
      name: "datetime"
    },
    DATE: {
      name: "date"
    },
    POINT: {
      name: "point"
    },
    LINESTRING: {
      name: "linestring"
    },
    POLYGON: {
      name: "polygon"
    },
    BINARY: {
      name: "binary"
    }
  };

  Magma.Value = (function() {
    function Value(_type, _value) {
      this._type = _type;
      this._value = _value;
    }

    Value.prototype.isNull = function() {
      return this._value === void 0 || this._value === null;
    };

    Value.prototype.isSequence = function() {
      return this._value instanceof Array;
    };

    Value.prototype.toString = function() {
      if (this.isNull()) {
        return null;
      } else {
        return this._value + "";
      }
    };

    Value.prototype.type = function(t) {
      if (t === void 0) {
        return new Value(ValueType.TEXT, this._type.name);
      } else {
        return t.valueOf(this._value);
      }
    };

    Value.prototype.value = function() {
      return this._value;
    };

    return Value;

  })();

}).call(this);
